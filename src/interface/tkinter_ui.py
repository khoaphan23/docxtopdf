"""
Tkinter UI Module - Clean Class Implementation
"""
import tkinter as tk
from tkinter import messagebox, ttk
import logging
from pathlib import Path
from typing import Callable, Optional, Dict, Any

logger = logging.getLogger(__name__)


class ConverterUI:
    """
    Giao di·ªán ch√≠nh c·ªßa ·ª©ng d·ª•ng Word to PDF Converter
    Qu·∫£n l√Ω t·∫•t c·∫£ c√°c th√†nh ph·∫ßn UI v√† t∆∞∆°ng t√°c ng∆∞·ªùi d√πng
    """
    
    def __init__(self, 
                 root: tk.Tk,
                 callbacks: Dict[str, Callable],
                 config: Optional[Dict[str, Any]] = None):
        """
        Kh·ªüi t·∫°o giao di·ªán ·ª©ng d·ª•ng
        
        Args:
            root: C·ª≠a s·ªï Tkinter root
            callbacks: Dict ch·ª©a c√°c callback functions
            config: C·∫•u h√¨nh UI (optional)
        """
        self.root = root
        self.callbacks = callbacks
        self.config = config or {}
        
        # UI components
        self.main_frame = None
        self.select_button = None
        self.convert_button = None
        self.download_button = None
        self.progress_bar = None
        self.status_label = None
        
        # Style
        self.style = None
        
        # Setup UI
        self._setup_window()
        self._setup_styles()
        self._create_ui_components()
        self._configure_events()
        
        logger.info("ConverterUI initialized successfully")
    
    def _setup_window(self):
        """C·∫•u h√¨nh c·ª≠a s·ªï ch√≠nh"""
        title = self.config.get('window_title', 'Word to PDF Converter - Chuy·ªÉn ƒë·ªïi t√†i li·ªáu')
        self.root.title(title)
        self.root.geometry('800x600')
        self.root.resizable(True, True)
        
        # ƒê·∫∑t c·ª≠a s·ªï ·ªü gi·ªØa m√†n h√¨nh
        self.root.update_idletasks()
        width = self.root.winfo_width()
        height = self.root.winfo_height()
        x = (self.root.winfo_screenwidth() // 2) - (width // 2)
        y = (self.root.winfo_screenheight() // 2) - (height // 2)
        self.root.geometry(f"{width}x{height}+{x}+{y}")
        
        # Icon (n·∫øu c√≥)
        try:
            self.root.iconbitmap()  # C√≥ th·ªÉ th√™m icon file
        except:
            pass
    
    def _setup_styles(self):
        """C·∫•u h√¨nh styles cho UI"""
        self.style = ttk.Style()
        self.style.theme_use('clam')
        
        # Button styles
        self.style.configure('Primary.TButton', 
                           font=('Arial', 12, 'bold'),
                           padding=(15, 8))
        
        self.style.configure('Secondary.TButton',
                           font=('Arial', 10),
                           padding=(10, 6))
        
        # Label styles  
        self.style.configure('Title.TLabel',
                           font=('Arial', 18, 'bold'),
                           foreground='#2c3e50')
        
        self.style.configure('Header.TLabel',
                           font=('Arial', 12, 'bold'),
                           foreground='#34495e')
        
        self.style.configure('Info.TLabel',
                           font=('Arial', 10),
                           foreground='#7f8c8d')
        
        # Progress bar style
        self.style.configure('Custom.Horizontal.TProgressbar',
                           troughcolor='#ecf0f1',
                           background='#3498db')
    
    def _create_ui_components(self):
        """T·∫°o c√°c th√†nh ph·∫ßn UI"""
        # Main container
        self.main_frame = ttk.Frame(self.root, padding="30")
        self.main_frame.grid(row=0, column=0, sticky=(tk.W, tk.E, tk.N, tk.S))
        
        # Configure grid weights
        self.root.columnconfigure(0, weight=1)
        self.root.rowconfigure(0, weight=1)
        self.main_frame.columnconfigure(0, weight=1)
        
        # Create sections
        self._create_header_section()
        self._create_action_section()
        self._create_progress_section()
        self._create_info_section()
        self._create_footer_section()
    
    def _create_header_section(self):
        """T·∫°o ph·∫ßn header"""
        header_frame = ttk.Frame(self.main_frame)
        header_frame.grid(row=0, column=0, sticky=(tk.W, tk.E), pady=(0, 30))
        header_frame.columnconfigure(0, weight=1)
        
        # Title
        title_label = ttk.Label(header_frame, 
                               text="üîÑ Word to PDF Converter", 
                               style='Title.TLabel')
        title_label.grid(row=0, column=0)
        
        # Subtitle
        subtitle_label = ttk.Label(header_frame,
                                 text="Chuy·ªÉn ƒë·ªïi t√†i li·ªáu Word (.docx, .doc) sang PDF m·ªôt c√°ch nhanh ch√≥ng",
                                 style='Info.TLabel')
        subtitle_label.grid(row=1, column=0, pady=(5, 0))
    
    def _create_action_section(self):
        """T·∫°o ph·∫ßn c√°c n√∫t ch·ª©c nƒÉng"""
        action_frame = ttk.LabelFrame(self.main_frame, 
                                    text="üéØ Thao t√°c ch√≠nh", 
                                    padding="20")
        action_frame.grid(row=1, column=0, sticky=(tk.W, tk.E), pady=(0, 20))
        action_frame.columnconfigure((0, 1, 2), weight=1)
        
        # Select file button
        self.select_button = ttk.Button(
            action_frame,
            text=self.config.get('select_button_text', 'üìÅ Ch·ªçn file Word'),
            command=self.callbacks.get('on_select_file'),
            style='Primary.TButton'
        )
        self.select_button.grid(row=0, column=0, padx=(0, 10), sticky=(tk.W, tk.E))
        
        # Convert button
        self.convert_button = ttk.Button(
            action_frame,
            text=self.config.get('convert_button_text', 'üîÑ Chuy·ªÉn sang PDF'),
            command=self.callbacks.get('on_convert'),
            style='Primary.TButton',
            state=tk.DISABLED
        )
        self.convert_button.grid(row=0, column=1, padx=10, sticky=(tk.W, tk.E))
        
        # Download button
        self.download_button = ttk.Button(
            action_frame,
            text=self.config.get('download_button_text', '‚¨áÔ∏è T·∫£i xu·ªëng'),
            command=self.callbacks.get('on_download'),
            style='Primary.TButton',
            state=tk.DISABLED
        )
        self.download_button.grid(row=0, column=2, padx=(10, 0), sticky=(tk.W, tk.E))
    
    def _create_progress_section(self):
        """T·∫°o ph·∫ßn hi·ªÉn th·ªã ti·∫øn tr√¨nh"""
        progress_frame = ttk.LabelFrame(self.main_frame, 
                                      text="üìä Ti·∫øn tr√¨nh", 
                                      padding="15")
        progress_frame.grid(row=2, column=0, sticky=(tk.W, tk.E), pady=(0, 20))
        progress_frame.columnconfigure(0, weight=1)
        
        # Progress bar
        self.progress_bar = ttk.Progressbar(
            progress_frame,
            mode='determinate',
            style='Custom.Horizontal.TProgressbar'
        )
        self.progress_bar.grid(row=0, column=0, sticky=(tk.W, tk.E), pady=(0, 10))
        
        # Status label
        self.status_label = ttk.Label(
            progress_frame,
            text="‚úÖ S·∫µn s√†ng - H√£y ch·ªçn file Word ƒë·ªÉ b·∫Øt ƒë·∫ßu",
            style='Info.TLabel'
        )
        self.status_label.grid(row=1, column=0)
    
    def _create_info_section(self):
        """T·∫°o ph·∫ßn th√¥ng tin h∆∞·ªõng d·∫´n"""
        info_frame = ttk.LabelFrame(self.main_frame, 
                                  text="üí° H∆∞·ªõng d·∫´n s·ª≠ d·ª•ng", 
                                  padding="15")
        info_frame.grid(row=3, column=0, sticky=(tk.W, tk.E), pady=(0, 20))
        
        instructions = [
            "1Ô∏è‚É£ Nh·∫•n 'Ch·ªçn file Word' ƒë·ªÉ ch·ªçn t√†i li·ªáu c·∫ßn chuy·ªÉn ƒë·ªïi",
            "2Ô∏è‚É£ Nh·∫•n 'Chuy·ªÉn sang PDF' ƒë·ªÉ th·ª±c hi·ªán chuy·ªÉn ƒë·ªïi",
            "3Ô∏è‚É£ Nh·∫•n 'T·∫£i xu·ªëng' ƒë·ªÉ l∆∞u PDF v√†o th∆∞ m·ª•c Downloads",
            "",
            "üìù H·ªó tr·ª£ ƒë·ªãnh d·∫°ng: .docx, .doc (t·ªëi ƒëa 100MB)",
            "üöÄ S·ª≠ d·ª•ng c√¥ng ngh·ªá docx2pdf cho ch·∫•t l∆∞·ª£ng t·ªët nh·∫•t",
            "üìÅ File PDF s·∫Ω t·ª± ƒë·ªông l∆∞u v√†o th∆∞ m·ª•c Downloads"
        ]
        
        for i, instruction in enumerate(instructions):
            if instruction:  # Skip empty lines
                label = ttk.Label(info_frame, text=instruction, style='Info.TLabel')
                label.grid(row=i, column=0, sticky=tk.W, pady=1)
            else:
                ttk.Separator(info_frame, orient='horizontal').grid(row=i, column=0, 
                                                                   sticky=(tk.W, tk.E), 
                                                                   pady=5)
    
    def _create_footer_section(self):
        """T·∫°o ph·∫ßn footer"""
        footer_frame = ttk.Frame(self.main_frame)
        footer_frame.grid(row=4, column=0, sticky=(tk.W, tk.E))
        footer_frame.columnconfigure(0, weight=1)
        
        # Footer info
        footer_label = ttk.Label(
            footer_frame,
            text="Word to PDF Converter - Phi√™n b·∫£n t·ªëi ∆∞u v·ªõi giao di·ªán ƒë·∫πp",
            style='Info.TLabel'
        )
        footer_label.grid(row=0, column=0, pady=(10, 0))
    
    def _configure_events(self):
        """C·∫•u h√¨nh c√°c s·ª± ki·ªán"""
        # Window close event
        self.root.protocol("WM_DELETE_WINDOW", self.callbacks.get('on_quit', self.root.quit))
        
        # Keyboard shortcuts
        self.root.bind('<Control-o>', lambda e: self.callbacks.get('on_select_file')())
        self.root.bind('<Control-s>', lambda e: self.callbacks.get('on_convert')())
        self.root.bind('<Control-d>', lambda e: self.callbacks.get('on_download')())
        self.root.bind('<F1>', lambda e: self._show_help())
    
    def update_status(self, message: str, progress: Optional[int] = None):
        """
        C·∫≠p nh·∫≠t status v√† progress bar
        
        Args:
            message: Th√¥ng b√°o tr·∫°ng th√°i
            progress: Gi√° tr·ªã progress (0-100)
        """
        self.status_label.config(text=message)
        
        if progress is not None:
            self.progress_bar['value'] = progress
        
        self.root.update_idletasks()
    
    def enable_convert_button(self, enabled: bool = True):
        """Enable/disable convert button"""
        state = tk.NORMAL if enabled else tk.DISABLED
        self.convert_button.config(state=state)
    
    def enable_download_button(self, enabled: bool = True):
        """Enable/disable download button"""
        state = tk.NORMAL if enabled else tk.DISABLED
        self.download_button.config(state=state)
    
    def show_file_selected_dialog(self, file_path: Path):
        """Hi·ªÉn th·ªã dialog file ƒë√£ ch·ªçn"""
        try:
            file_info = file_path.stat()
            file_size = file_info.st_size / (1024 * 1024)  # MB
            
            message = (
                f"‚úÖ ƒê√£ ch·ªçn file th√†nh c√¥ng!\n\n"
                f"üìÑ T√™n file: {file_path.name}\n"
                f"üìÅ ƒê∆∞·ªùng d·∫´n: {file_path.parent}\n"
                f"üìä K√≠ch th∆∞·ªõc: {file_size:.2f} MB\n"
                f"üìÖ S·ª≠a ƒë·ªïi l·∫ßn cu·ªëi: {file_info.st_mtime}"
            )
            
            self.show_success_message("File ƒë√£ ƒë∆∞·ª£c ch·ªçn", message)
            
        except Exception as e:
            logger.error(f"Error showing file dialog: {e}")
            self.show_success_message("File ƒë√£ ƒë∆∞·ª£c ch·ªçn", f"‚úÖ ƒê√£ ch·ªçn: {file_path.name}")
    
    def show_conversion_success_dialog(self, output_path: Path):
        """Hi·ªÉn th·ªã dialog chuy·ªÉn ƒë·ªïi th√†nh c√¥ng"""
        try:
            file_size = output_path.stat().st_size / (1024 * 1024)  # MB
            
            message = (
                f"üéâ Chuy·ªÉn ƒë·ªïi th√†nh c√¥ng!\n\n"
                f"üìÑ File PDF: {output_path.name}\n"
                f"üìÅ V·ªã tr√≠: {output_path.parent}\n"
                f"üìä K√≠ch th∆∞·ªõc: {file_size:.2f} MB\n\n"
                f"B·∫°n c√≥ th·ªÉ nh·∫•n 'T·∫£i xu·ªëng' ƒë·ªÉ sao ch√©p v√†o th∆∞ m·ª•c Downloads"
            )
            
            self.show_success_message("Chuy·ªÉn ƒë·ªïi ho√†n t·∫•t", message)
            
        except Exception as e:
            logger.error(f"Error showing conversion dialog: {e}")
            self.show_success_message("Chuy·ªÉn ƒë·ªïi ho√†n t·∫•t", f"‚úÖ ƒê√£ t·∫°o PDF: {output_path.name}")
    
    def show_download_success_dialog(self, download_path: Path):
        """Hi·ªÉn th·ªã dialog t·∫£i xu·ªëng th√†nh c√¥ng"""
        message = (
            f"‚¨áÔ∏è T·∫£i xu·ªëng th√†nh c√¥ng!\n\n"
            f"üìÑ File: {download_path.name}\n"
            f"üìÅ Th∆∞ m·ª•c Downloads: {download_path.parent}\n\n"
            f"B·∫°n c√≥ th·ªÉ m·ªü th∆∞ m·ª•c Downloads ƒë·ªÉ xem file PDF"
        )
        
        self.show_success_message("T·∫£i xu·ªëng ho√†n t·∫•t", message)
    
    def show_success_message(self, title: str, message: str):
        """Hi·ªÉn th·ªã th√¥ng b√°o th√†nh c√¥ng"""
        messagebox.showinfo(f"üéâ {title}", message)
    
    def show_error_message(self, title: str, message: str):
        """Hi·ªÉn th·ªã th√¥ng b√°o l·ªói"""
        messagebox.showerror(f"‚ùå {title}", message)
    
    def show_info_message(self, title: str, message: str):
        """Hi·ªÉn th·ªã th√¥ng b√°o th√¥ng tin"""
        messagebox.showinfo(f"‚ÑπÔ∏è {title}", message)
    
    def ask_yes_no(self, title: str, message: str) -> bool:
        """Hi·ªÉn th·ªã dialog x√°c nh·∫≠n"""
        return messagebox.askyesno(f"‚ùì {title}", message)
    
    def _show_help(self):
        """Hi·ªÉn th·ªã help dialog"""
        help_message = (
            "üîÑ Word to PDF Converter - H∆∞·ªõng d·∫´n s·ª≠ d·ª•ng\n\n"
            "Ph√≠m t·∫Øt:\n"
            "‚Ä¢ Ctrl+O: Ch·ªçn file Word\n"
            "‚Ä¢ Ctrl+S: Chuy·ªÉn ƒë·ªïi sang PDF\n"
            "‚Ä¢ Ctrl+D: T·∫£i xu·ªëng\n"
            "‚Ä¢ F1: Hi·ªÉn th·ªã tr·ª£ gi√∫p\n\n"
            "H·ªó tr·ª£:\n"
            "‚Ä¢ ƒê·ªãnh d·∫°ng: .docx, .doc\n"
            "‚Ä¢ K√≠ch th∆∞·ªõc t·ªëi ƒëa: 100MB\n"
            "‚Ä¢ Ch·∫•t l∆∞·ª£ng: Cao (docx2pdf)\n\n"
            "L∆∞u √Ω: ƒê·∫£m b·∫£o file Word kh√¥ng b·ªã m·∫≠t kh·∫©u b·∫£o v·ªá"
        )
        
        self.show_info_message("Tr·ª£ gi√∫p", help_message)
    
    def reset_ui(self):
        """Reset UI v·ªÅ tr·∫°ng th√°i ban ƒë·∫ßu"""
        self.enable_convert_button(False)
        self.enable_download_button(False)
        self.progress_bar['value'] = 0
        self.update_status("‚úÖ S·∫µn s√†ng - H√£y ch·ªçn file Word ƒë·ªÉ b·∫Øt ƒë·∫ßu")
        
        logger.info("UI reset to initial state")