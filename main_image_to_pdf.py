# main_image_to_pdf.py
from __future__ import annotations

import os
import shutil
import tkinter as tk
from tkinter import filedialog
from pathlib import Path
from typing import Optional, Tuple

# Core
from src.logging.logger_setup import setup_logger
from src.interface.tkinter_ui import ConverterUI

# FileHandler (gi·ªëng Word/Excel). N·∫øu thi·∫øu th√¨ fallback d√πng filedialog
try:
    from src.io.file_handler import FileHandler
except Exception:
    FileHandler = None  # fallback

# Converter ·∫£nh -> PDF
from src.converters.image_to_pdf import image_to_pdf, is_image_file

# Gi·ªëng style 2 c√°i kia: d√πng pattern *.ext ƒë·ªÉ hi·ªÉn th·ªã tr√™n UI
SUPPORTED_PATTERNS: Tuple[str, ...] = ("*.png", "*.jpg", "*.jpeg", "*.bmp", "*.tif", "*.tiff", "*.webp")


class ImageToPDFApp:
    def __init__(self) -> None:
        self.logger = setup_logger("image_to_pdf")
        self.root: Optional[tk.Tk] = None
        self.ui: Optional[ConverterUI] = None

        self.fh = FileHandler(supported_extensions=SUPPORTED_PATTERNS) if FileHandler else None

        self.selected_file: Optional[Path] = None
        self.temp_pdf_path: Optional[Path] = None

        # Th∆∞ m·ª•c t·∫°m ƒë·ªìng b·ªô nh∆∞ Word/Excel
        self.temp_dir = Path(__file__).resolve().parent / "outputpdf"
        try:
            self.temp_dir.mkdir(parents=True, exist_ok=True)
        except Exception as e:
            self.logger.warning("Kh√¥ng th·ªÉ t·∫°o ./outputpdf, d√πng th∆∞ m·ª•c t·∫°m h·ªá th·ªëng: %s", e)
            self.temp_dir = Path(os.getenv("TEMP", Path.home())) / "outputpdf_tmp"
            self.temp_dir.mkdir(parents=True, exist_ok=True)

    # ===== B∆∞·ªõc 1: Ch·ªçn file =====
    def _on_select(self) -> None:
        try:
            if self.fh and hasattr(self.fh, "select_image_file"):
                path_str = self.fh.select_image_file(parent=self.root)
            else:
                path_str = filedialog.askopenfilename(
                    title="Ch·ªçn t·ªáp ·∫¢nh‚Ä¶",
                    filetypes=[("Image files", "*.png *.jpg *.jpeg *.bmp *.tif *.tiff *.webp"),
                               ("All files", "*.*")],
                    initialdir=os.path.expanduser("~"),
                )
        except Exception as e:
            self.logger.warning("Ch·ªçn file l·ªói, fallback: %s", e)
            path_str = filedialog.askopenfilename(
                title="Ch·ªçn t·ªáp ·∫¢nh‚Ä¶",
                filetypes=[("Image files", "*.png *.jpg *.jpeg *.bmp *.tif *.tiff *.webp"),
                           ("All files", "*.*")],
                initialdir=os.path.expanduser("~"),
            )

        if not path_str:
            return

        path = Path(path_str)
        if not is_image_file(str(path)):
            if self.ui:
                self.ui.alert_warning("Sai ƒë·ªãnh d·∫°ng", "H√£y ch·ªçn ·∫£nh (PNG/JPG/JPEG/BMP/TIF/TIFF/WEBP).")
                self.ui.update_status("‚ö†Ô∏è T·ªáp kh√¥ng h·ª£p l·ªá. H√£y ch·ªçn l·∫°i.", 0)
            return

        self.selected_file = path
        if self.ui:
            self.ui.update_status(f"‚úÖ ƒê√£ ch·ªçn: {path.name}", 10)
            self.ui.set_buttons_enabled(select=True, convert=True, open_downloads=True, quit_btn=True)

    # ===== B∆∞·ªõc 2: Chuy·ªÉn & L∆ØU T·∫†M v√†o ./outputpdf =====
    def _on_convert(self) -> None:
        if not self.selected_file:
            if self.ui:
                self.ui.alert_warning("Thi·∫øu t·ªáp", "H√£y ch·ªçn ·∫£nh tr∆∞·ªõc khi chuy·ªÉn.")
                self.ui.update_status("‚ö†Ô∏è Ch∆∞a c√≥ t·ªáp. H√£y ch·ªçn ·∫£nh.", 0)
            return

        src = self.selected_file
        if not is_image_file(str(src)):
            if self.ui:
                self.ui.alert_warning("Sai ƒë·ªãnh d·∫°ng", "T·ªáp ƒë√£ ch·ªçn kh√¥ng ph·∫£i ·∫£nh h·ª£p l·ªá.")
                self.ui.update_status("‚ö†Ô∏è T·ªáp kh√¥ng h·ª£p l·ªá. H√£y ch·ªçn l·∫°i.", 0)
            return

        try:
            if self.ui:
                self.ui.set_buttons_enabled(select=False, convert=False, open_downloads=False, quit_btn=False)
                self.ui.update_status("‚è≥ ƒêang chuy·ªÉn sang PDF‚Ä¶", 30)

            out_name = src.with_suffix(".pdf").name
            temp_out = self.temp_dir / out_name

            # L∆ØU T·∫†M v√†o ./outputpdf
            pdf_path = image_to_pdf(str(src), str(temp_out))
            self.temp_pdf_path = Path(pdf_path)

            # --- TH√îNG B√ÅO R√ï R√ÄNG NH∆Ø Y√äU C·∫¶U ---
            if self.ui:
                self.ui.update_status(
                    f"‚úÖ Chuy·ªÉn th√†nh c√¥ng! ƒê√É L∆ØU v√†o: {temp_out.name} (th∆∞ m·ª•c ./outputpdf). "
                    "B·∫•m 'T·∫£i v·ªÅ‚Ä¶' ƒë·ªÉ ch·ªçn n∆°i l∆∞u cu·ªëi.",
                    90
                )
                # popup th√¥ng b√°o
                self.ui.alert_info(
                    "Chuy·ªÉn th√†nh c√¥ng",
                    f"PDF ƒë√£  v√†o:\n{temp_out}\n\n"
                    "ƒê√¢y CH∆ØA ph·∫£i n∆°i l∆∞u cu·ªëi. H√£y b·∫•m 'T·∫£i v·ªÅ‚Ä¶' ƒë·ªÉ ch·ªçn th∆∞ m·ª•c ƒë√≠ch."
                )
                self.ui.set_buttons_enabled(select=True, convert=True, open_downloads=True, quit_btn=True)

        except Exception as e:
            self.logger.exception("L·ªói khi chuy·ªÉn ·∫£nh sang PDF: %s", e)
            if self.ui:
                self.ui.alert_error("L·ªói", f"Kh√¥ng th·ªÉ chuy·ªÉn sang PDF: {e}")
                self.ui.update_status("‚ùå L·ªói khi chuy·ªÉn. H√£y th·ª≠ l·∫°i.", 0)
                self.ui.set_buttons_enabled(select=True, convert=True, open_downloads=True, quit_btn=True)

    # ===== B∆∞·ªõc 3: T·∫£i v·ªÅ (ch·ªçn n∆°i l∆∞u cu·ªëi) =====
    def _on_open_downloads(self) -> None:
        if not self.temp_pdf_path or not self.temp_pdf_path.exists():
            if self.ui:
                self.ui.alert_warning("Ch∆∞a c√≥ PDF", "H√£y b·∫•m 'Chuy·ªÉn sang PDF' tr∆∞·ªõc.")
                self.ui.update_status("‚ö†Ô∏è Ch∆∞a c√≥ PDF t·∫°m. H√£y chuy·ªÉn tr∆∞·ªõc.", 0)
            return

        try:
            final_path_str = filedialog.asksaveasfilename(
                parent=self.root,
                title="Ch·ªçn n∆°i l∆∞u PDF‚Ä¶",
                defaultextension=".pdf",
                filetypes=[("PDF files", "*.pdf")],
                initialfile=self.temp_pdf_path.name,
                initialdir=str(Path.home() / "Downloads"),
            )
            if not final_path_str:
                return

            final_path = Path(final_path_str)
            final_path.parent.mkdir(parents=True, exist_ok=True)
            shutil.copyfile(str(self.temp_pdf_path), str(final_path))

            if self.ui:
                self.ui.update_status(f"‚úÖ ƒê√£ l∆∞u v·ªÅ: {final_path}", 100)
                self.ui.alert_info("Ho√†n t·∫•t", f"ƒê√£ l∆∞u PDF: {final_path}")
        except Exception as e:
            self.logger.exception("L·ªói khi l∆∞u v·ªÅ: %s", e)
            if self.ui:
                self.ui.alert_error("L·ªói", f"Kh√¥ng th·ªÉ l∆∞u v·ªÅ: {e}")
                self.ui.update_status("‚ùå L·ªói khi l∆∞u v·ªÅ. H√£y th·ª≠ l·∫°i.", 0)

    def run(self) -> None:
        self.root = tk.Tk()
        self.ui = ConverterUI(
            self.root,
            on_select=self._on_select,
            on_convert=self._on_convert,
            on_open_downloads=self._on_open_downloads,
            title_text="üñºÔ∏è Image ‚Üí PDF",
            select_button_text="Ch·ªçn ·∫£nh",
            convert_button_text="Chuy·ªÉn sang PDF",
            downloads_hint_text="üì• B∆∞·ªõc 3: T·∫£i v·ªÅ ‚Äì ch·ªçn n∆°i l∆∞u cu·ªëi",
            supported_extensions=SUPPORTED_PATTERNS,
            window_title="Image to PDF Converter",
            window_size="680x420",
        )

        if self.ui:
            self.ui.update_status("‚úÖ S·∫µn s√†ng - Ch·ªçn t·ªáp ·∫¢nh ƒë·ªÉ b·∫Øt ƒë·∫ßu", 0)
            self.ui.set_buttons_enabled(select=True, convert=False, open_downloads=True, quit_btn=True)

        self.root.mainloop()


if __name__ == "__main__":
    ImageToPDFApp().run()
