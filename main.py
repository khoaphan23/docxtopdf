"""
Word to PDF Converter - Clean Class-based Application
"""
import tkinter as tk
import logging
from pathlib import Path
from typing import Optional

# Import c√°c class t·ª´ modules
from src.converters.word_to_pdf import DocumentConverter
from src.io.file_handler import FileHandler
from src.interface.tkinter_ui import ConverterUI
from src.logging.logger_setup import setup_logger
import src as config


class WordToPDFApplication:
    """
    ·ª®ng d·ª•ng chuy·ªÉn ƒë·ªïi Word sang PDF ch√≠nh
    S·ª≠ d·ª•ng c·∫•u tr√∫c class clean v√† t·ªëi ∆∞u
    """
    
    def __init__(self):
        """Kh·ªüi t·∫°o ·ª©ng d·ª•ng"""
        # Setup logging
        self.logger = setup_logger(
            name=__name__,
            level=config.LOG_LEVEL,
            log_format=getattr(config, "LOG_FORMAT", "%(asctime)s - %(name)s - %(levelname)s - %(message)s")
        )
        
        # Initialize core components
        self.converter = DocumentConverter()
        self.file_handler = FileHandler()
        
        # UI components
        self.root: Optional[tk.Tk] = None
        self.ui: Optional[ConverterUI] = None
        
        # Application state
        self.selected_file: Optional[Path] = None
        self.converted_file: Optional[Path] = None
        
        self.logger.info("WordToPDFApplication initialized successfully")
    
    def _setup_callbacks(self) -> dict:
        """T·∫°o dict c√°c callback functions cho UI"""
        return {
            'on_select_file': self._handle_select_file,
            'on_convert': self._handle_convert_file,
            'on_download': self._handle_download_file,
            'on_quit': self._handle_quit
        }
    
    def _setup_ui_config(self) -> dict:
        """T·∫°o dict c·∫•u h√¨nh UI"""
        return {
            'window_title': config.WINDOW_TITLE,
            'select_button_text': config.SELECT_BUTTON_TEXT,
            'convert_button_text': config.CONVERT_BUTTON_TEXT,
            'download_button_text': config.DOWNLOAD_BUTTON_TEXT,
            'quit_button_text': config.QUIT_BUTTON_TEXT
        }
    
    def _handle_select_file(self):
        """X·ª≠ l√Ω ch·ªçn file Word"""
        try:
            self.ui.update_status("üîç ƒêang m·ªü h·ªôp tho·∫°i ch·ªçn file...", 10)
            
            # Ch·ªçn file
            file_path = self.file_handler.select_word_file()
            
            if file_path:
                # Validate file
                is_valid, message = self.file_handler.validate_word_file(file_path)
                
                if not is_valid:
                    self.ui.show_error_message("File kh√¥ng h·ª£p l·ªá", message)
                    self.ui.update_status("‚ùå File kh√¥ng h·ª£p l·ªá", 0)
                    return
                
                # File h·ª£p l·ªá
                self.selected_file = file_path
                self.ui.show_file_selected_dialog(file_path)
                self.ui.enable_convert_button(True)
                self.ui.update_status("‚úÖ ƒê√£ ch·ªçn file - S·∫µn s√†ng chuy·ªÉn ƒë·ªïi", 25)
                
                self.logger.info(f"File selected and validated: {file_path}")
                
            else:
                self.ui.update_status("‚úÖ S·∫µn s√†ng - H√£y ch·ªçn file Word ƒë·ªÉ b·∫Øt ƒë·∫ßu", 0)
                self.logger.info("File selection cancelled by user")
                
        except Exception as e:
            error_msg = f"L·ªói khi ch·ªçn file: {e}"
            self.logger.error(error_msg)
            self.ui.show_error_message("L·ªói ch·ªçn file", error_msg)
            self.ui.update_status("‚ùå L·ªói ch·ªçn file", 0)
    
    def _handle_convert_file(self):
        """X·ª≠ l√Ω chuy·ªÉn ƒë·ªïi file Word sang PDF"""
        try:
            if not self.selected_file:
                self.ui.show_error_message("Ch∆∞a ch·ªçn file", "Vui l√≤ng ch·ªçn file Word tr∆∞·ªõc!")
                return
            
            # Ki·ªÉm tra kh·∫£ nƒÉng chuy·ªÉn ƒë·ªïi
            if not self.converter.is_available():
                info = self.converter.get_conversion_info()
                error_msg = (f"Kh√¥ng th·ªÉ chuy·ªÉn ƒë·ªïi!\n\n"
                           f"Ph∆∞∆°ng th·ª©c: {info['method']}\n"
                           f"docx2pdf: {info['docx2pdf_available']}\n"
                           f"win32com: {info['win32com_available']}\n\n"
                           f"Vui l√≤ng c√†i ƒë·∫∑t: pip install docx2pdf")
                self.ui.show_error_message("Thi·∫øu th∆∞ vi·ªán", error_msg)
                return
            
            # Disable convert button
            self.ui.enable_convert_button(False)
            self.ui.update_status("üîÑ ƒêang chuy·ªÉn ƒë·ªïi...", 50)
            
            # Generate output path
            output_path = self.file_handler.generate_output_path(
                input_file=self.selected_file,
                output_format=config.OUTPUT_FORMAT
            )
            
            self.logger.info(f"Converting: {self.selected_file} -> {output_path}")
            
            # Perform conversion
            success, message = self.converter.convert_word_to_pdf(
                input_path=self.selected_file,
                output_path=output_path
            )
            
            if success:
                self.converted_file = output_path
                self.ui.show_conversion_success_dialog(output_path)
                self.ui.enable_download_button(True)
                self.ui.update_status("üéâ Chuy·ªÉn ƒë·ªïi th√†nh c√¥ng - C√≥ th·ªÉ t·∫£i xu·ªëng", 100)
                
                self.logger.info(f"Conversion completed successfully: {output_path}")
                
            else:
                self.ui.show_error_message("Chuy·ªÉn ƒë·ªïi th·∫•t b·∫°i", message)
                self.ui.update_status("‚ùå Chuy·ªÉn ƒë·ªïi th·∫•t b·∫°i", 25)
                self.logger.error(f"Conversion failed: {message}")
                
        except Exception as e:
            error_msg = f"L·ªói kh√¥ng mong mu·ªën: {e}"
            self.logger.error(error_msg)
            self.ui.show_error_message("L·ªói chuy·ªÉn ƒë·ªïi", error_msg)
            self.ui.update_status("‚ùå L·ªói chuy·ªÉn ƒë·ªïi", 25)
            
        finally:
            # Re-enable convert button
            self.ui.enable_convert_button(True)
    
    def _handle_download_file(self):
        """X·ª≠ l√Ω t·∫£i xu·ªëng file PDF"""
        try:
            if not self.converted_file or not self.converted_file.exists():
                self.ui.show_error_message(
                    "Ch∆∞a c√≥ file PDF", 
                    "Vui l√≤ng chuy·ªÉn ƒë·ªïi file Word tr∆∞·ªõc khi t·∫£i xu·ªëng!"
                )
                return
            
            self.ui.update_status("‚¨áÔ∏è ƒêang t·∫£i xu·ªëng...", 75)
            
            # Copy to Downloads
            success, message, downloads_path = self.file_handler.copy_to_downloads(
                source_file=self.converted_file
            )
            
            if success and downloads_path:
                self.ui.show_download_success_dialog(downloads_path)
                self.ui.update_status("‚úÖ T·∫£i xu·ªëng th√†nh c√¥ng!", 100)
                self.logger.info(f"Download successful: {downloads_path}")
                
            else:
                self.ui.show_error_message("T·∫£i xu·ªëng th·∫•t b·∫°i", message)
                self.ui.update_status("‚ùå T·∫£i xu·ªëng th·∫•t b·∫°i", 100)
                self.logger.error(f"Download failed: {message}")
                
        except Exception as e:
            error_msg = f"L·ªói khi t·∫£i xu·ªëng: {e}"
            self.logger.error(error_msg)
            self.ui.show_error_message("L·ªói t·∫£i xu·ªëng", error_msg)
            self.ui.update_status("‚ùå L·ªói t·∫£i xu·ªëng", 100)
    
    def _handle_quit(self):
        """X·ª≠ l√Ω tho√°t ·ª©ng d·ª•ng"""
        try:
            self.logger.info("Application shutdown initiated")
            
            # Confirm quit if there's work in progress
            if self.converted_file and self.converted_file.exists():
                if not self.ui.ask_yes_no("X√°c nh·∫≠n tho√°t", 
                                        "B·∫°n c√≥ ch·∫Øc mu·ªën tho√°t?\nFile PDF ƒë√£ ƒë∆∞·ª£c t·∫°o."):
                    return
            
            # Cleanup
            cleanup_count = self.file_handler.cleanup_temp_files() if hasattr(self.file_handler, "cleanup_temp_files") else 0
            if cleanup_count > 0:
                self.logger.info(f"Cleaned up {cleanup_count} temporary files")
            
            # Close application
            if self.root:
                self.root.destroy()
                
            self.logger.info("Application shutdown completed")
            
        except Exception as e:
            self.logger.error(f"Error during shutdown: {e}")
    
    def run(self):
        """Ch·∫°y ·ª©ng d·ª•ng ch√≠nh"""
        try:
            # Create root window
            self.root = tk.Tk()
            
            # Setup callbacks v√† config
            callbacks = self._setup_callbacks()
            ui_config = self._setup_ui_config()
            
            # Create UI
            self.ui = ConverterUI(
                root=self.root,
                callbacks=callbacks,
                config=ui_config
            )
            
            # Show initial status
            converter_info = self.converter.get_conversion_info()
            if converter_info['available']:
                status_msg = f"‚úÖ S·∫µn s√†ng ({converter_info['method']}) - H√£y ch·ªçn file Word"
            else:
                status_msg = "‚ö†Ô∏è Ch∆∞a c√†i ƒë·∫∑t th∆∞ vi·ªán chuy·ªÉn ƒë·ªïi"
            
            self.ui.update_status(status_msg, 0)
            
            self.logger.info("Starting main application loop")
            
            # Start main loop
            self.root.mainloop()
            
        except Exception as e:
            error_msg = f"L·ªói nghi√™m tr·ªçng: {e}"
            self.logger.error(error_msg)
            print(error_msg)
            
        finally:
            self._handle_quit()


def main():
    """
    Entry point c·ªßa ·ª©ng d·ª•ng
    T·∫°o v√† ch·∫°y WordToPDFApplication
    """
    try:
        app = WordToPDFApplication()
        app.run()
        
    except Exception as e:
        print(f"Failed to start application: {e}")
        logging.error(f"Failed to start application: {e}")


if __name__ == "__main__":
    main()